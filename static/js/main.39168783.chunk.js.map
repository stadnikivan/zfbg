{"version":3,"sources":["components/Registration/styles.module.scss","components/Registration/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","styles","require","React","memo","useState","name","setName","phone","setPhone","adress","setAdress","isAgreeWithPolicy","setIsAgreeWithPolicy","nameOfRole","setNameOfRole","formData","key","value","text","setValue","roles","isChecked","className","registrationForm","onSubmit","e","length","preventDefault","console","log","alert","action","map","row","Fragment","htmlFor","classnames","input","myName","required","id","onChange","target","placeholder","role","type","checked","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kKACAA,EAAOC,QAAU,CAAC,iBAAmB,iCAAiC,MAAQ,sBAAsB,OAAS,uBAAuB,OAAS,yB,oHCCvIC,EAASC,EAAQ,IAuGRC,MAAMC,MA9FA,WAAO,IAAD,EACDD,IAAME,SAAS,IADd,mBAClBC,EADkB,KACZC,EADY,OAECJ,IAAME,SAAS,IAFhB,mBAElBG,EAFkB,KAEXC,EAFW,OAGGN,IAAME,SAAS,IAHlB,mBAGlBK,EAHkB,KAGVC,EAHU,OAIyBR,IAAME,UAAS,GAJxC,mBAIlBO,EAJkB,KAICC,EAJD,OAKWV,IAAME,SAAe,QALhC,mBAKlBS,EALkB,KAKNC,EALM,KAMnBC,EAAW,CACf,CAAEC,IAAK,OAAQC,MAAOZ,EAAMa,KAAM,OAAQC,SAAUb,GACpD,CAAEU,IAAK,QAASC,MAAOV,EAAOW,KAAM,QAASC,SAAUX,IAGnDY,EAAe,CACnB,CAAEJ,IAAK,OAAQE,KAAM,OAAQG,UAA0B,SAAfR,GACxC,CAAEG,IAAK,OAAQE,KAAM,OAAQG,UAA0B,SAAfR,GACxC,CAAEG,IAAK,YAAaE,KAAM,YAAaG,UAA0B,cAAfR,IAqBpD,OACE,0BACES,UAAWtB,EAAOuB,iBAClBC,SArB4B,SAACC,GAC1BpB,EAAKqB,QAAUnB,EAAMmB,QAAUnB,EAAMmB,QAAWjB,EAAOiB,OAAS,GAAMf,GAAqBE,GAC9FY,EAAEE,iBACFC,QAAQC,IAAI,SACZC,MAAM,uBACNxB,EAAQ,IACRE,EAAS,IACTE,EAAU,IACVI,EAAc,QACdF,GAAqB,KAErBkB,MAAM,SACNL,EAAEE,mBAUFI,OAAO,IAEP,iDACChB,EAASiB,KAAI,SAAAC,GAAG,OACf,kBAAC,IAAMC,SAAP,CAAgBlB,IAAKiB,EAAIjB,KACvB,2BAAOmB,QAASF,EAAIjB,KAAMiB,EAAIf,MAC9B,2BACEI,UAAWc,IAAWpC,EAAOqC,MAAR,eAClBrC,EAAOsC,OAASjC,IAAI,UAdlB,UAgBLkC,UAAU,EACVC,GAAIP,EAAIjB,IACRC,MAAOgB,EAAIhB,MACXwB,SAAU,SAAAhB,GAAC,OAAIQ,EAAId,SAASM,EAAEiB,OAAOzB,cAK3C,yBAAKK,UAAWtB,EAAOS,QACrB,8BACEQ,MAAOR,EACPgC,SAAU,SAAAhB,GAAC,OAAIf,EAAUe,EAAEiB,OAAOzB,QAClC0B,YAAY,YAKfvB,EAAMY,KAAI,SAAAY,GAAI,OACb,kBAAC,IAAMV,SAAP,CAAgBlB,IAAK4B,EAAK5B,KACxB,+BACG4B,EAAK1B,KADR,IAEE,2BACE2B,KAAK,QACLJ,SAAU,kBAAM3B,EAAc8B,EAAK5B,MACnCC,MAAO2B,EAAK5B,IACZ8B,QAASF,EAAKvB,iBAKtB,+BACE,2BACEwB,KAAK,WACLJ,SAAU,kBAAM7B,GAAsBD,IACtCmC,QAASnC,EACTN,KAAK,SACLmC,GAAG,WANP,yBAUA,4BAAQK,KAAK,UAAb,aCxFSE,MARf,WACE,OACE,yBAAKzB,UAAU,OACb,kBAAC,EAAD,QCKc0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.39168783.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"registrationForm\":\"styles_registrationForm__17eIS\",\"input\":\"styles_input__3r0g8\",\"adress\":\"styles_adress__biUYQ\",\"myName\":\"styles_myName__3I76r\"};","import React from \"react\";\nimport classnames from \"classnames\";\nconst styles = require(\"./styles.module.scss\");\n\ntype Role = \"cash\" | \"card\" | \"checkbook\"\ntype Roles = {\n  key: Role,\n  text: string,\n  isChecked: boolean\n}[]\n\nconst Registration = () => {\n  const [name, setName] = React.useState(\"\");\n  const [phone, setPhone] = React.useState(\"\");\n  const [adress, setAdress] = React.useState(\"\");\n  const [isAgreeWithPolicy, setIsAgreeWithPolicy] = React.useState(false);\n  const [nameOfRole, setNameOfRole] = React.useState<Role>(\"card\");\n  const formData = [\n    { key: \"name\", value: name, text: \"Name\", setValue: setName },\n    { key: \"phone\", value: phone, text: \"Phone\", setValue: setPhone }\n  ];\n\n  const roles: Roles = [\n    { key: \"cash\", text: \"Cash\", isChecked: nameOfRole === \"cash\" },\n    { key: \"card\", text: \"Card\", isChecked: nameOfRole === \"card\" },\n    { key: \"checkbook\", text: \"Checkbook\", isChecked: nameOfRole === \"checkbook\" }\n  ];\n\n  const signInFormSubmitHandler = (e: React.FormEvent<HTMLFormElement>) => {\n    if ((name.length && phone.length && phone.length  && adress.length > 1) && isAgreeWithPolicy && nameOfRole){\n      e.preventDefault()\n      console.log(\"Order\");\n      alert(\"Order was confirmed\")\n      setName('')\n      setPhone('')\n      setAdress('')\n      setNameOfRole('card')\n      setIsAgreeWithPolicy(false)\n    }else{\n      alert(\"Error\");\n      e.preventDefault();\n    } \n  };\n\n  const myName = \"Dima\"\n\n  return (\n    <form\n      className={styles.registrationForm}\n      onSubmit={signInFormSubmitHandler}\n      action=\"\"\n    >\n      <h1>Registration Form</h1>\n      {formData.map(row => (\n        <React.Fragment key={row.key}>\n          <label htmlFor={row.key}>{row.text}</label>\n          <input\n            className={classnames(styles.input, {\n              [styles.myName]: name === `${myName}`\n            })}\n            required={true}\n            id={row.key}\n            value={row.value}\n            onChange={e => row.setValue(e.target.value)}\n          />\n        </React.Fragment>\n      ))}\n\n      <div className={styles.adress}>\n        <textarea\n          value={adress}\n          onChange={e => setAdress(e.target.value)}\n          placeholder=\"Adress\"\n        >\n        </textarea>\n      </div>\n\n      {roles.map(role => (\n        <React.Fragment key={role.key}>\n          <label>\n            {role.text}:\n            <input\n              type=\"radio\"\n              onChange={() => setNameOfRole(role.key)}\n              value={role.key}\n              checked={role.isChecked}\n            />\n          </label>\n        </React.Fragment>\n      ))}\n      <label>\n        <input\n          type=\"checkbox\"\n          onChange={() => setIsAgreeWithPolicy(!isAgreeWithPolicy)}\n          checked={isAgreeWithPolicy}\n          name=\"policy\"\n          id=\"policy\"\n        />\n        Agree with the policy\n      </label>\n      <button type=\"submit\">Order</button>\n    </form>\n  );\n};\n\nexport default React.memo(Registration);","import React from 'react';\nimport './App.css';\nimport Registration from './components/Registration';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Registration />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}